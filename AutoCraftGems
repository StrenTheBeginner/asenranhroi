local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Library = ReplicatedStorage.Library
local SaveMod = require(Library.Client.Save)
local player = Players.LocalPlayer

-- Create enhanced GUI with proper scrolling console
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local CloseButton = Instance.new("TextButton")
local LogsFrame = Instance.new("Frame")
local ScrollingFrame = Instance.new("ScrollingFrame")
local LogsContainer = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")

ScreenGui.Name = "AutoCraftGemGUI"
ScreenGui.Parent = player.PlayerGui
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Name = "MainFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.BackgroundTransparency = 0.3
Frame.BorderColor3 = Color3.fromRGB(255, 0, 255)
Frame.BorderSizePixel = 2
Frame.Position = UDim2.new(0.02, 0, 0.5, -150)
Frame.Size = UDim2.new(0.25, 0, 0.3, 0)
Frame.ClipsDescendants = true

Title.Name = "Title"
Title.Parent = Frame
Title.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
Title.BackgroundTransparency = 0.7
Title.Size = UDim2.new(1, -30, 0, 30)
Title.Position = UDim2.new(0, 5, 0, 5)
Title.Font = Enum.Font.GothamBold
Title.Text = "Auto Craft Gem | Project Lunar ðŸŒ™"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14
Title.TextXAlignment = Enum.TextXAlignment.Left

CloseButton.Name = "CloseButton"
CloseButton.Parent = Frame
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.BackgroundTransparency = 0.7
CloseButton.Position = UDim2.new(1, -25, 0, 5)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 14
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
    script:Destroy()
end)

LogsFrame.Name = "LogsFrame"
LogsFrame.Parent = Frame
LogsFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
LogsFrame.BackgroundTransparency = 0.7
LogsFrame.Position = UDim2.new(0, 5, 0, 40)
LogsFrame.Size = UDim2.new(1, -10, 1, -50)
LogsFrame.ClipsDescendants = true

ScrollingFrame.Parent = LogsFrame
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.ScrollBarThickness = 5
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 0, 255)
ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

LogsContainer.Name = "LogsContainer"
LogsContainer.Parent = ScrollingFrame
LogsContainer.BackgroundTransparency = 1
LogsContainer.Size = UDim2.new(1, 0, 0, 0)
LogsContainer.AutomaticSize = Enum.AutomaticSize.Y

UIListLayout.Parent = LogsContainer
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 3)

-- Function to add logs to GUI with timestamp
local function AddLog(message, isError)
    local timestamp = os.date("%H:%M:%S")
    local LogLabel = Instance.new("TextLabel")
    LogLabel.Name = "Log_"..tostring(os.time())
    LogLabel.Parent = LogsContainer
    LogLabel.BackgroundTransparency = 1
    LogLabel.Size = UDim2.new(1, -5, 0, 20)
    LogLabel.Font = Enum.Font.RobotoMono
    LogLabel.Text = "["..timestamp.."] "..message
    LogLabel.TextColor3 = isError and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(220, 220, 220)
    LogLabel.TextSize = 12
    LogLabel.TextXAlignment = Enum.TextXAlignment.Left
    LogLabel.TextWrapped = true
    LogLabel.TextYAlignment = Enum.TextYAlignment.Top
    LogLabel.AutomaticSize = Enum.AutomaticSize.Y
    
    -- Auto-scroll to bottom
    task.spawn(function()
        task.wait()
        ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.AbsoluteCanvasSize.Y)
    end)
end

-- Override print and warn functions
local originalPrint = print
local originalWarn = warn

function print(...)
    local message = table.concat({...}, " ")
    originalPrint(message)
    AddLog(message, false)
end

function warn(...)
    local message = table.concat({...}, " ")
    originalWarn(message)
    AddLog("[WARNING] "..message, true)
end

print("Auto Craft starting now...")

local function GetAllGemAmounts()
    local inventory = {}
    local success, saveData = pcall(SaveMod.Get)
    
    if success and saveData and saveData.Inventory and saveData.Inventory.Misc then
        inventory = saveData.Inventory.Misc
    else
        warn("Failed to get inventory data")
    end

    local gemData = {
        rainbow = 0,
        emerald = 0,
        amethyst = 0,
        onyx = 0,
        topaz = 0,
        quartz = 0
    }

    for _, itemData in pairs(inventory) do
        if itemData and itemData.id and itemData._am then
            if itemData.id == "Rainbow Gem" then
                gemData.rainbow = gemData.rainbow + itemData._am
            elseif itemData.id == "Emerald Gem" then
                gemData.emerald = gemData.emerald + itemData._am
            elseif itemData.id == "Amethyst Gem" then
                gemData.amethyst = gemData.amethyst + itemData._am
            elseif itemData.id == "Onyx Gem" then
                gemData.onyx = gemData.onyx + itemData._am
            elseif itemData.id == "Topaz Gem" then
                gemData.topaz = gemData.topaz + itemData._am
            elseif itemData.id == "Quartz Gem" then
                gemData.quartz = gemData.quartz + itemData._am
            end
        end
    end

    return gemData
end

local function craftGem(gemType, amount, currentCraft, totalCrafts)
    local craftTypes = {
        emerald = {number = 3, name = "Amethyst", from = "Emerald"},
        amethyst = {number = 4, name = "Rainbow", from = "Amethyst"},
        rainbow = {number = 5, name = "Quartz", from = "Rainbow"},
        quartz = {number = 6, name = "Topaz", from = "Quartz"},
        topaz = {number = 7, name = "Onyx", from = "Topaz"},
        onyx = {number = 8, name = "Huge Mining Monkey", from = "Onyx"}
    }
    
    local craftInfo = craftTypes[gemType]
    if not craftInfo then return false end
    
    -- Calculate actual amount to send to server
    local serverAmount = amount
    local consumedAmount = amount * 10
    if amount == 1 then
        consumedAmount = 10  -- For single crafts, we still consume 10 gems
    end
    
    print(string.format("Attempting to craft %d %s from %d %s (%d/%d)", 
        amount, craftInfo.name, consumedAmount, craftInfo.from, currentCraft, totalCrafts))
    
    local args = {
        [1] = "MiningCraftMachine",
        [2] = craftInfo.number,
        [3] = serverAmount,
        [4] = {
            ["shiny"] = false,
            ["pt"] = 0
        }
    }
    
    local success, result = pcall(function()
        return ReplicatedStorage.Network.PetCraftingMachine_Craft:InvokeServer(unpack(args))
    end)
    
    if success then
        -- Handle both table response and boolean response
        if type(result) == "table" then
            if result.success then
                print(string.format("Success! Crafted %d %s from %d %s (%d/%d)", 
                    amount, craftInfo.name, consumedAmount, craftInfo.from, currentCraft, totalCrafts))
                return true
            else
                warn(string.format("Server rejected craft for %s (code %s): %s", 
                    gemType, 
                    tostring(result.code or "N/A"), 
                    tostring(result.message or "Unknown error")))
                return false
            end
        elseif type(result) == "boolean" then
            if result then
                print(string.format("Success! Crafted %d %s from %d %s (%d/%d)", 
                    amount, craftInfo.name, consumedAmount, craftInfo.from, currentCraft, totalCrafts))
                return true
            else
                warn("Server rejected craft (simple false response)")
                return false
            end
        else
            warn("Unexpected server response type:", type(result))
            return false
        end
    else
        warn(string.format("Failed to call craft remote for %s: %s", gemType, tostring(result)))
        return false
    end
end

local function calculateCrafts(gemAmount)
    local crafts = {}
    local remaining = gemAmount
    
    -- Calculate crafts for 10000 batches (requires 100000 gems)
    if remaining >= 100000 then
        local count = math.floor(remaining / 100000)
        if count > 0 then
            table.insert(crafts, {amount = 10000, count = count})
            remaining = remaining - (count * 100000)
        end
    end
    
    -- Calculate crafts for 1000 batches (requires 10000 gems)
    if remaining >= 10000 then
        local count = math.floor(remaining / 10000)
        if count > 0 then
            table.insert(crafts, {amount = 1000, count = count})
            remaining = remaining - (count * 10000)
        end
    end
    
    -- Calculate crafts for 100 batches (requires 1000 gems)
    if remaining >= 1000 then
        local count = math.floor(remaining / 1000)
        if count > 0 then
            table.insert(crafts, {amount = 100, count = count})
            remaining = remaining - (count * 1000)
        end
    end
    
    -- Calculate crafts for 10 batches (requires 100 gems)
    if remaining >= 100 then
        local count = math.floor(remaining / 100)
        if count > 0 then
            table.insert(crafts, {amount = 10, count = count})
            remaining = remaining - (count * 100)
        end
    end
    
    -- Calculate crafts for single batches (requires 10 gems)
    if remaining >= 10 then
        table.insert(crafts, {amount = 1, count = math.floor(remaining / 10)})
    end
    
    return crafts
end

local function autoCraftGems()
    local gems = GetAllGemAmounts()
    local craftedSomething = false
    
    -- First check if we need to update our gem counts
    local function refreshGems()
        gems = GetAllGemAmounts()
        print("Current gem counts:")
        print(string.format("Emerald: %d | Amethyst: %d | Rainbow: %d | Quartz: %d | Topaz: %d | Onyx: %d",
            gems.emerald, gems.amethyst, gems.rainbow, gems.quartz, gems.topaz, gems.onyx))
    end
    
    refreshGems()
    
    -- Emerald to Amethyst
    if gems.emerald >= 10 then
        local crafts = calculateCrafts(gems.emerald)
        print(string.format("\nStarting craft Amethyst from Emeralds (%d Emeralds in Inventory)", gems.emerald))
        
        for _, craft in ipairs(crafts) do
            print(string.format("Processing %d crafts of %d Emeralds each (total %d Emeralds)", 
                craft.count, craft.amount * 10, craft.count * craft.amount * 10))
            
            for i = 1, craft.count do
                if craftGem("emerald", craft.amount, i, craft.count) then
                    wait(3)
                    refreshGems()
                else
                    print("Stopping crafting due to error")
                    return true
                end
            end
        end
        print("Finished crafting Amethyst from Emeralds")
        craftedSomething = true
        return true
    end
    
    -- Amethyst to Rainbow
    if gems.amethyst >= 10 then
        local crafts = calculateCrafts(gems.amethyst)
        print(string.format("\nStarting craft Rainbow from Amethysts (%d Amethysts in Inventory)", gems.amethyst))
        
        for _, craft in ipairs(crafts) do
            print(string.format("Processing %d crafts of %d Amethysts each (total %d Amethysts)", 
                craft.count, craft.amount * 10, craft.count * craft.amount * 10))
            
            for i = 1, craft.count do
                if craftGem("amethyst", craft.amount, i, craft.count) then
                    wait(3)
                    refreshGems()
                else
                    print("Stopping crafting due to error")
                    return true
                end
            end
        end
        print("Finished crafting Rainbow from Amethysts")
        craftedSomething = true
        return true
    end
    
    -- Rainbow to Quartz
    if gems.rainbow >= 10 then
        local crafts = calculateCrafts(gems.rainbow)
        print(string.format("\nStarting craft Quartz from Rainbows (%d Rainbows in Inventory)", gems.rainbow))
        
        for _, craft in ipairs(crafts) do
            print(string.format("Processing %d crafts of %d Rainbows each (total %d Rainbows)", 
                craft.count, craft.amount * 10, craft.count * craft.amount * 10))
            
            for i = 1, craft.count do
                if craftGem("rainbow", craft.amount, i, craft.count) then
                    wait(3)
                    refreshGems()
                else
                    print("Stopping crafting due to error")
                    return true
                end
            end
        end
        print("Finished crafting Quartz from Rainbows")
        craftedSomething = true
        return true
    end
    
    -- Quartz to Topaz
    if gems.quartz >= 10 then
        local crafts = calculateCrafts(gems.quartz)
        print(string.format("\nStarting craft Topaz from Quartz (%d Quartz in Inventory)", gems.quartz))
        
        for _, craft in ipairs(crafts) do
            print(string.format("Processing %d crafts of %d Quartz each (total %d Quartz)", 
                craft.count, craft.amount * 10, craft.count * craft.amount * 10))
            
            for i = 1, craft.count do
                if craftGem("quartz", craft.amount, i, craft.count) then
                    wait(3)
                    refreshGems()
                else
                    print("Stopping crafting due to error")
                    return true
                end
            end
        end
        print("Finished crafting Topaz from Quartz")
        craftedSomething = true
        return true
    end
    
    -- Topaz to Onyx
    if gems.topaz >= 10 then
        local crafts = calculateCrafts(gems.topaz)
        print(string.format("\nStarting craft Onyx from Topaz (%d Topaz in Inventory)", gems.topaz))
        
        for _, craft in ipairs(crafts) do
            print(string.format("Processing %d crafts of %d Topaz each (total %d Topaz)", 
                craft.count, craft.amount * 10, craft.count * craft.amount * 10))
            
            for i = 1, craft.count do
                if craftGem("topaz", craft.amount, i, craft.count) then
                    wait(3)
                    refreshGems()
                else
                    print("Stopping crafting due to error")
                    return true
                end
            end
        end
        print("Finished crafting Onyx from Topaz")
        craftedSomething = true
        return true
    end
    
    -- Onyx to Huge Mining Monkey (special case - always craft 1 at a time)
    if gems.onyx >= 10 then
        local totalCrafts = math.floor(gems.onyx / 10)
        print(string.format("\nStarting craft Huge Mining Monkey from Onyx (%d Onyx in Inventory)", gems.onyx))
        
        for i = 1, totalCrafts do
            if craftGem("onyx", 1, i, totalCrafts) then
                wait(3)
                refreshGems()
            else
                print("Stopping crafting due to error")
                return true
            end
        end
        print("Finished crafting Huge Mining Monkey from Onyx")
        craftedSomething = true
        return true
    end
    
    if not craftedSomething then
        print("\nNot enough gems to craft anything (minimum 10 required)")
        return false
    end
end

print("\nStarting crafting process...")
local crafting = true
while crafting do
    crafting = autoCraftGems()
    if crafting then
        print("\nChecking for more gems to craft...")
        wait(3)
    end
end

print("\nFinished crafting all possible gems")
