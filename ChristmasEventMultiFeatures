local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local player = game.Players.LocalPlayer

local function teleportToHolidayEvent()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    local teleportPart = game:GetService("Workspace").__THINGS.Instances.HolidayEvent.Teleports.Enter

    humanoidRootPart.CFrame = teleportPart.CFrame
    print("Player has been teleported to the Holiday Event!")
end

-- Call the teleport function
teleportToHolidayEvent()


wait(35)

local function checkAndCraftGifts()
    local playerInventory = Save.Get()["Inventory"]
    local MiscInv = playerInventory["Misc"] or {}
    local snowflakeCount = 0
    local diamond = 0

    print("Inventory loaded. Misc items count: " .. #MiscInv)

    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local diamondStat = leaderstats:FindFirstChild("ðŸ’Ž Diamonds")
        if diamondStat and diamondStat:IsA("IntValue") then
            diamond = diamondStat.Value
        else
            warn("No ðŸ’Ž Diamonds found in leaderstats.")
        end
    else
        warn("No leaderstats found.")
    end

    for _, item in pairs(MiscInv) do
        if item.id == "Snowflake" then
            snowflakeCount = snowflakeCount + item._am
        end
    end

    print("Total Snowflake items:", snowflakeCount)

    local totalGiftsToCraft = math.floor(snowflakeCount / 10)
    local totalDiamondToCraftAll = totalGiftsToCraft * 10000

    print("Total Gifts to Craft:", totalGiftsToCraft)
    print("Total Diamonds Required:", totalDiamondToCraftAll)
    print("Available Diamonds:", diamond)

    if diamond >= totalDiamondToCraftAll and totalGiftsToCraft > 0 then
        local args = {totalGiftsToCraft * 10}

        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("SnowMachine_Activate"):InvokeServer(unpack(args))
        end)

        if success then
            print("Successfully crafted gifts!")
        else
            warn("Failed to craft gifts:", err)
        end
    else
        if totalGiftsToCraft == 0 then
            warn("Not enough snowflakes to craft any gifts.")
        else
            warn("Not enough diamonds to craft gifts.")
        end
    end
end

checkAndCraftGifts()

wait(25)

local function autoClaimFreeForeverPack()
    if getgenv().Config.AutoClaimFreeForeverPack then
        local args = { [1] = "Default" }

        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("ForeverPacks: Claim Free"):InvokeServer(unpack(args))
        end)

        if success then
            print("Successfully claimed Free ForeverPack!")
        else
            warn("Failed to claim Free ForeverPack:", err)
        end
    end
end

autoClaimFreeForeverPack()

wait(15) 

local function sendSnowflakeGifts()
    local playerInventory = Save.Get()["Inventory"]
    local lootboxInv = playerInventory["Lootbox"] or {}

    local SnowflakeGiftCount = 0
    local giftUIDs = {}

    print("Lootbox loaded. Snowflake Gift count: " .. #lootboxInv)

    for _, item in pairs(lootboxInv) do
        if item.id == "Snowflake Gift" then
            SnowflakeGiftCount = SnowflakeGiftCount + item._am
            table.insert(giftUIDs, _)
        end
    end

    print("Total Snowflake Gift items:", SnowflakeGiftCount)

    if SnowflakeGiftCount > 100 then
        local args = {
            [1] = getgenv().Config.Username,
            [2] = "Here Snowflake Gift",  -- The note
            [3] = "Lootbox",
            [4] = giftUIDs[1],  -- Send the first gift UID
            [5] = SnowflakeGiftCount
        }

        print("Sent:", unpack(args))
        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
        end)

        if success then
            print("Successfully sent Snowflake Gifts!")
        else
            warn("Failed to send Snowflake Gifts:", err)
        end
    else
        warn("No Snowflake Gifts found or amount below threshold")
    end
end

sendSnowflakeGifts()
wait(5)
sendSnowflakeGifts()

-- Function to send Huge Pets
local function sendHugePets()
    local Network = require(game.ReplicatedStorage.Library.Client.Network)
    local HugeUIDList = {}

    for PetUID, PetData in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
        if PetData.id:find("Huge") then 
            table.insert(HugeUIDList, PetUID)
            if PetData._lk then
                repeat
                    task.wait()
                until Network.Invoke("Locking_SetLocked", PetUID, false)
                print("Unlocked", PetUID)
            end
        end
    end

    print("Huge Pets to send:", #HugeUIDList)

    for _, PetUID in pairs(HugeUIDList) do
        local selectedUser = getgenv().Config.Username  -- Using the username from Config
        local selectedMessage = getgenv().Config.NoteToSend  -- Using the message from Config

        repeat
            task.wait()
        until Network.Invoke("Mailbox: Send", selectedUser, selectedMessage, "Pet", PetUID, 1)
        
        print("Sent", PetUID, "to", selectedUser, "with message:", selectedMessage)
    end
end

wait(15)
sendHugePets()

-- New Feature: AutoClaimAllMail
if getgenv().Config.AutoClaimAllMail then
    local function getFrameNames()
        local frameNames = {}
        local playerGui = player:WaitForChild("PlayerGui")
        local machines = playerGui:WaitForChild("_MACHINES")
        local mailboxMachine = machines:WaitForChild("MailboxMachine")
        local frame = mailboxMachine:WaitForChild("Frame")
        local giftsFrame = frame:WaitForChild("GiftsFrame")
        local itemsFrame = giftsFrame:WaitForChild("ItemsFrame")
        
        if itemsFrame and #itemsFrame:GetChildren() > 0 then
            for _, child in pairs(itemsFrame:GetChildren()) do
                if child:IsA("Frame") then
                    table.insert(frameNames, child.Name)
                end
            end
        end
        
        return frameNames
    end

    local function claimPet(frameNames)
        local args = {}
        for i, name in ipairs(frameNames) do
            args[i] = {name}
        end
        
        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim"):InvokeServer(unpack(args))
        end)
        
        if success then
            print("Successfully sent claim request with frames:", table.concat(frameNames, ", "))
        else
            warn("Failed to send claim request:", err)
        end
    end

    local function claimPeriodically()
        while true do
            local frameNames = getFrameNames()
            if #frameNames > 0 then
                claimPet(frameNames)
                wait(300)  -- Wait for 5 minutes
            else
                print("No mails found to claim.")
                wait(10)  -- Wait before checking again
            end
        end
    end

if getgenv().Config.SendAll2024Gifts then
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local Network = game:GetService("ReplicatedStorage"):WaitForChild("Network")

-- Thresholds for each gift type
local SmalLToSend = 100
local MediumToSend = 70
local LargeToSend = 5
local XLargeToSend = 1
local GargantuanToSend = 1
local HypeEggToSend = 1 -- Threshold for Hype Egg

-- Fetch Lootbox inventory and find specific items
local playerInventory = Save.Get()["Inventory"]
local LootboxInv = playerInventory["Lootbox"] or {} -- Ensure Lootbox inventory exists

-- Initialize counts and UIDs for each item type
local SmallCount, MediumCount, LargeCount, XLargeCount, GargantuanCount, HypeEggCount = 0, 0, 0, 0, 0, 0
local SmallUIDs, MediumUIDs, LargeUIDs, XLargeUIDs, GargantuanUIDs, HypeEggUIDs = {}, {}, {}, {}, {}, {}

-- Single loop to count each type of gift
for _, item in pairs(LootboxInv) do
    if item.id:find("2024 Small") then
        SmallCount = SmallCount + item._am -- Assuming _am is the correct field for amount
        table.insert(SmallUIDs, _) -- Insert the loop index (_) as the UID
    elseif item.id:find("2024 Medium") then
        MediumCount = MediumCount + item._am
        table.insert(MediumUIDs, _) 
    elseif item.id:find("2024 Large") then
        LargeCount = LargeCount + item._am
        table.insert(LargeUIDs, _) 
    elseif item.id == "2024 X-Large Christmas Present" then
        XLargeCount = XLargeCount + item._am
        table.insert(XLargeUIDs, _) 
    elseif item.id:find("2024 Gargantuan") then
        GargantuanCount = GargantuanCount + item._am
        table.insert(GargantuanUIDs, _) 
    elseif item.id:find("Hype Egg") then
        HypeEggCount = HypeEggCount + item._am
        table.insert(HypeEggUIDs, _) -- Insert the loop index (_) as the UID
    end
end

-- Print counts for debugging purposes
print("Small Gift Count:", SmallCount)
print("Medium Gift Count:", MediumCount)
print("Large Gift Count:", LargeCount)
print("X-Large Gift Count:", XLargeCount)
print("Gargantuan Gift Count:", GargantuanCount)
print("Hype Egg Count:", HypeEggCount)

-- Helper function to send mail
local function sendMail(count, threshold, UIDs, itemType)
    if count > threshold then
        local args = {
            [1] = getgenv().Config.Username,
            [2] = "Happy Holidays!",
            [3] = "Lootbox",
            [4] = UIDs[1], -- Use the first loop index as UID
            [5] = count
        }
        
        -- Sending the message
        Network:WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
        
        -- Print success message after sending mail
        print("Mail sent successfully to " .. usernames .. " with " .. count .. " " .. itemType .. " items!")
    else
        -- Print if the threshold wasn't met
        print("Item count for " .. itemType .. " did not exceed the threshold.")
    end
end

-- Function to send all 2024 gifts if SendAll2024Gifts is true
local function SendAll2024Gifts(sendAll)
    if sendAll then
        wait(7)
        sendMail(SmallCount, SmalLToSend, SmallUIDs, "2024 Small")
        wait(7)
        sendMail(MediumCount, MediumToSend, MediumUIDs, "2024 Medium")
        wait(7)
        sendMail(LargeCount, LargeToSend, LargeUIDs, "2024 Large")
        wait(7)
        sendMail(XLargeCount, XLargeToSend, XLargeUIDs, "2024 X-Large")
        wait(7)
        sendMail(GargantuanCount, GargantuanToSend, GargantuanUIDs, "2024 Gargantuan")
        wait(7)
        sendMail(HypeEggCount, HypeEggToSend, HypeEggUIDs, "Hype Egg")
    else
        print("SendAll2024Gifts is set to false, no gifts will be sent.")
    end
end

-- Example: You can call SendAll2024Gifts(true) to send all 2024 gifts
SendAll2024Gifts(true)


    -- Start the AutoClaimAllMail process
    claimPeriodically()
    checkAndCraftGifts()
    sendSnowflakeGifts()
    autoClaimFreeForeverPack()
    SendAll2024Gifts(sendAll)
end
