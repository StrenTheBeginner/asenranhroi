local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Library = ReplicatedStorage.Library
local SaveMod = require(Library.Client.Save)
local player = Players.LocalPlayer
local playerName = player and player.Name or "Unknown Player"
local playerId = player and player.UserId or 0

local function IsPlayerConnected()
    local player = Players.LocalPlayer
    return player and player:IsDescendantOf(game)
end

local function GetPlayerAvatar(userId)
    return string.format("https://www.roblox.com/headshot-thumbnail/image?userId=%d&width=420&height=420&format=png", userId)
end

local function GetAllGemAmounts()
    local inventory = {}
    local success, saveData = pcall(SaveMod.Get)
    
    if success and saveData and saveData.Inventory and saveData.Inventory.Misc then
        inventory = saveData.Inventory.Misc
    else
        warn("Failed to get inventory data")
    end

    local gemData = {
        rainbow = 0,
        emerald = 0,
        amethyst = 0,
        onyx = 0,
        topaz = 0,
        quartz = 0
    }

    for _, itemData in pairs(inventory) do
        if itemData and itemData.id and itemData._am then
            if itemData.id == "Rainbow Gem" then
                gemData.rainbow = gemData.rainbow + itemData._am
            elseif itemData.id == "Emerald Gem" then
                gemData.emerald = gemData.emerald + itemData._am
            elseif itemData.id == "Amethyst Gem" then
                gemData.amethyst = gemData.amethyst + itemData._am
            elseif itemData.id == "Onyx Gem" then
                gemData.onyx = gemData.onyx + itemData._am
            elseif itemData.id == "Topaz Gem" then
                gemData.topaz = gemData.topaz + itemData._am
            elseif itemData.id == "Quartz Gem" then
                gemData.quartz = gemData.quartz + itemData._am
            end
        end
    end

    return gemData
end

local function SendToWebhook(gemData)
    local gems = {
        {"üåà Rainbow Gem", gemData.rainbow or 0},
        {"üíö Emerald Gem", gemData.emerald or 0},
        {"üíú Amethyst Gem", gemData.amethyst or 0},
        {"üíô Onyx Gem", gemData.onyx or 0},
        {"üíõ Topaz Gem", gemData.topaz or 0},
        {"ü§ç Quartz Gem", gemData.quartz or 0}
    }
    
    local descriptionLines = {
        string.format("\n**Username: ||%s||**", playerName),
        "```"
    }

    for _, gem in ipairs(gems) do
        descriptionLines[#descriptionLines + 1] = string.format("%-15s = %d", gem[1], gem[2])
    end
    
    descriptionLines[#descriptionLines + 1] = "```"
    
    local embedColor = IsPlayerConnected() and 0x00FF00 or 0xFF0000
    
    local mainEmbed = {
        title = "üíé **Gem Inventory Update** üíé",
        description = table.concat(descriptionLines, "\n"),
        color = embedColor,
        timestamp = DateTime.now():ToIsoDate(),
    thumbnail = {
        url = "https://cdn.discordapp.com/attachments/1350797858240204810/1357324447996051526/8355-moon.png"
    },
        footer = {
            text = string.format("discord.gg/projectlunar | üåô | Next update: %d mins", getgenv().Config.Webhook.UpdateIntervalMinutes),
        }
    }

    
    -- Add player avatar as footer icon
    if player then
        mainEmbed.footer.icon_url = GetPlayerAvatar(playerId)
    end

    local success, err = pcall(function()
        local response = request({
            Url = getgenv().Config.Webhook.URL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                content = getgenv().Config.Webhook.PingID and string.format("<@%s>", getgenv().Config.Webhook.PingID) or nil,
                embeds = {mainEmbed}
            })
        })
        return response
    end)
    
    if not success then
        warn("Failed to send webhook:", err)
    end
end


local function CheckAndNotifyGems()
    local gemData = GetAllGemAmounts()
    
    print("\n=====Current Gems:=====")
    print(string.format("%-15s = %d", "üåà Rainbow Gem", gemData.rainbow or 0))
    print(string.format("%-15s = %d", "üíö Emerald Gem", gemData.emerald or 0))
    print(string.format("%-15s = %d", "üíú Amethyst Gem", gemData.amethyst or 0))
    print(string.format("%-15s = %d", "üíô Onyx Gem", gemData.onyx or 0))
    print(string.format("%-15s = %d", "üíõ Topaz Gem", gemData.topaz or 0))
    print(string.format("%-15s = %d", "ü§ç Quartz Gem", gemData.quartz or 0))
    
    SendToWebhook(gemData)
end

CheckAndNotifyGems()
while true do
    wait(getgenv().Config.Webhook.UpdateIntervalMinutes * 60)
    CheckAndNotifyGems()
end
