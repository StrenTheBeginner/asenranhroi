local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local Network = require(game.ReplicatedStorage.Library.Client.Network)
local player = game.Players.LocalPlayer

local teleportLocation = game:GetService("Workspace").__THINGS.Instances.HolidayEvent.Teleports.Enter
local username = getgenv().Config["Username"]  -- Use the global config for the username
local noteToSend = getgenv().Config["NoteToSend"]  -- Use the global config for the note to send
local snowflakeToGiftRatio = 10  -- The number of snowflakes required to craft one gift
local diamondPerGift = 10000  -- Diamonds needed per gift crafted
local loopInterval = 10  -- Loop interval in seconds

-- Function to teleport the player to the Holiday Event
local function teleportPlayer()
    if teleportLocation and teleportLocation:IsA("BasePart") then
        player.Character:SetPrimaryPartCFrame(teleportLocation.CFrame)
        print("Player has been teleported to the Holiday Event!")
    else
        warn("Teleport location not found.")
    end
end

-- Function for checking and crafting gifts based on snowflakes and diamonds
local function checkAndCraftGifts()
    -- Wait for 10 seconds after teleporting
    wait(10)

    local playerInventory = Save.Get()["Inventory"]
    local MiscInv = playerInventory["Misc"] or {}
    local snowflakeCount = 0
    local diamond = 0

    -- Get diamonds from leaderstats
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local diamondStat = leaderstats:FindFirstChild("ðŸ’Ž Diamonds")
        if diamondStat and diamondStat:IsA("IntValue") then
            diamond = diamondStat.Value
        else
            warn("No ðŸ’Ž Diamonds found in leaderstats.")
        end
    else
        warn("No leaderstats found.")
    end

    -- Check snowflake count in MiscInv
    for _, item in pairs(MiscInv) do
        if item.id == "Snowflake" then
            snowflakeCount = snowflakeCount + item._am
        end
    end

    -- Output snowflake count
    print("Total Snowflake items:", snowflakeCount)

    -- If snowflakes are less than 10, stop the script and send gifts
    if snowflakeCount < 10 then
        print("Not enough snowflakes! Stopping script and sending gifts...")
        sendGiftsToUsername(snowflakeCount)  -- Call the function to send gifts
        return  -- Exit the loop and stop the script
    end

    local totalGiftsToCraft = math.floor(snowflakeCount / snowflakeToGiftRatio)
    local totalDiamondToCraftAll = totalGiftsToCraft * diamondPerGift

    print("Total Gifts to Craft:", totalGiftsToCraft)
    print("Total Diamonds Required:", totalDiamondToCraftAll)
    print("Available Diamonds:", diamond)

    -- Craft gifts if enough diamonds and snowflakes
    if diamond >= totalDiamondToCraftAll and totalGiftsToCraft > 0 then
        local args = {
            totalGiftsToCraft * snowflakeToGiftRatio
        }

        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("SnowMachine_Activate"):InvokeServer(unpack(args))
        end)

        if success then
            print("Successfully crafted gifts!")
        else
            warn("Failed to craft gifts:", err)
        end
    else
        if totalGiftsToCraft == 0 then
            warn("Not enough snowflakes to craft any gifts.")
        else
            warn("Not enough diamonds to craft gifts.")
        end
    end

    -- Wait 5 seconds before sending gifts
    wait(5)

-- Function to send all Snowflake gifts and Huge pets to the configured username
local function sendGiftsToUsername(snowflakeCount)
    -- Send all Snowflake Gifts
    local totalGiftsToSend = math.floor(snowflakeCount / snowflakeToGiftRatio)
    for i = 1, totalGiftsToSend do
        repeat
            task.wait()  -- Wait until the gift is sent
        until Network.Invoke("Mailbox: Send", username, noteToSend, "Gift", "SnowflakeGift", 1)
        print("Sent Snowflake Gift to", username)
    end

    -- Send Huge pets
    local HugeUIDList = {}
    for PetUID, PetData in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
        if PetData.id:find("Huge") then
            table.insert(HugeUIDList, PetUID)
        end
    end

    -- Send Huge pets to the configured user
    for _, PetUID in pairs(HugeUIDList) do
        repeat
            task.wait()  -- Wait until the pet is sent
        until Network.Invoke("Mailbox: Send", username, noteToSend, "Pet", PetUID, 1)
        print("Sent Huge pet", PetUID, "to", username, "with message:", noteToSend)
    end
end

-- First teleport the player, then proceed to the rest of the functions
teleportPlayer()

-- Run the check and craft functions
checkAndCraftGifts()  -- Craft gifts and send them to the username once
