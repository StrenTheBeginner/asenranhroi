local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Network = ReplicatedStorage:WaitForChild("Network")
local InstancingEvent = Network:WaitForChild("Instancing_PlayerEnterInstance")
local FireCustomEvent = Network:WaitForChild("Instancing_FireCustomFromClient")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local isMining = false
local stopMining = false

-- Function to teleport to mining area
local function teleportToMining()
    local miningCFrame = CFrame.new(11962.5088, 10.7709723, -4000.94141)
    player.Character.HumanoidRootPart.CFrame = miningCFrame
    print("Teleported to Mining Area")
end

-- Function to get server list
local function ListServers(cursor)
    local Servers = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    local Raw = game:HttpGet(Servers .. ((cursor and "&cursor=" .. cursor) or ""))
    return HttpService:JSONDecode(Raw)
end

-- Function to teleport to Zone 5
local function teleportToZone5()
    local args = { [1] = "__Zone_5" }
    Network:WaitForChild("Teleports_RequestInstanceTeleport"):InvokeServer(unpack(args))
    print("Teleported to Zone 5")
end

-- Function to start mining
local function startMining()
    local targetEvent = Network:WaitForChild("BlockWorlds_Target")
    local breakEvent = Network:WaitForChild("BlockWorlds_Break")

    local currentY = 0
    local currentX, currentZ = -8, 7
    local MIN_Y, MIN_X, MAX_X, MIN_Z, MAX_Z = -200, -8, 7, -8, 7

    local function incrementCoords()
        currentZ = currentZ - 1
        if currentZ < MIN_Z then
            currentZ = MAX_Z
            currentX = currentX + 1
            if currentX > MAX_X then
                currentX = MIN_X
                currentY = currentY - 1
                if currentY < MIN_Y then
                    stopMining = true
                end
            end
        end
    end

    while isMining and not stopMining do
        local coords = Vector3int16.new(currentX, currentY, currentZ)
        targetEvent:FireServer(coords)
        task.wait(0)
        breakEvent:FireServer(coords)
        task.wait(0)
        incrementCoords()
    end
end

-- Function for server hop
local function serverHop()
    local Server, Next = nil, nil

    -- Wait for the configured time before attempting server hop
    task.wait(getgenv().Config.serverHopWaitTime)

    -- Attempt to find a server to hop to
    repeat
        local Servers = ListServers(Next)
        Server = Servers.data[math.random(1, (#Servers.data / 3))]  -- Randomly select a server
        Next = Servers.nextPageCursor
    until Server

    -- If there's a valid server with available slots and not the same job id
    if Server.playing < Server.maxPlayers and Server.id ~= game.JobId then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, Server.id, player)
        print("Server hop to server with ID: " .. Server.id)
    else
        print("No suitable server found, retrying...")
        serverHop()  -- Retry server hop if no suitable server found
    end
end

-- Example code for world detection and teleportation (you can keep your existing logic for this)
local currentPlaceId = game.PlaceId
print("Current Place ID:", currentPlaceId)

local world, teleportPart
if currentPlaceId == 8737899170 then
    world = 1
    teleportPart = game.Workspace.Map["1 | Spawn"].PARTS.Model.Mining.Enter
elseif currentPlaceId == 16498369169 then
    world = 2
    teleportPart = game.Workspace.Map2["100 | Tech Spawn"].PARTS_LOD.Model.Mining.Enter
elseif currentPlaceId == 17503543197 then
    world = 3
    teleportPart = game.Workspace.Map3["200 | Void Spawn"].PARTS_LOD:GetChildren()[3].Mining.Enter
end

-- Logic for handling teleportation and mining event, as well as server hopping
if world then
    print("Detected World:", world)
    task.wait(15) -- Wait 3 seconds before teleporting
    if teleportPart then
        local player = game.Players.LocalPlayer
        if player and player.Character then
            player.Character:SetPrimaryPartCFrame(teleportPart.CFrame)
            task.wait(10)
            InstancingEvent:InvokeServer("MiningEvent")
            
            -- Check for pickaxe and handle the event
            local path = workspace:FindFirstChild("__THINGS")
            if path then
                path = path:FindFirstChild("__INSTANCE_CONTAINER")
                if path then
                    path = path:FindFirstChild("Active")
                    if path then
                        path = path:FindFirstChild("MiningEvent")
                        if path then
                            path = path:FindFirstChild("INTERACT")
                            if path then
                                local woodenPickaxe = path:FindFirstChild("WoodenPickaxe")
                                if woodenPickaxe then
                                    print("WoodenPickaxe exists!")
                                    local args = {"MiningEvent", "ClaimPickaxe"}
                                    FireCustomEvent:FireServer(unpack(args))
                                else
                                    print("WoodenPickaxe was already claimed!")
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

teleportToZone5()
task.wait(4)
teleportToMining()
task.wait(10)

-- Start mining process
isMining = true
coroutine.wrap(startMining)()
coroutine.wrap(serverHop)()

